version: '2.4'

services:
  # Dependencies
  minio:
    image: minio/minio
    environment:
      MINIO_ACCESS_KEY: al_storage_key
      MINIO_SECRET_KEY: Ch@ngeTh!sPa33w0rd
    ports:
      - '9000:9000'
    command: server /data

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
    environment:
      - xpack.security.enabled=true
      - discovery.type=single-node
      - logger.level=WARN
      - 'ELASTIC_PASSWORD=devpass'
      - 'ES_JAVA_OPTS=-Xms1024m -Xmx1024m'
    ports:
      - '9200:9200'
    healthcheck:
      test: ['CMD-SHELL', 'curl --silent --fail -u elastic:$$ELASTIC_PASSWORD localhost:9200/_cluster/health || exit 1']
      interval: 30s
      timeout: 30s
      retries: 3

  redis:
    image: redis
    ports:
      - '6379:6379'
      - '6380:6379'
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: cccs/nginx-ssl-frontend
    volumes:
      - ./minimal.template:/opt/minimal.template
    ports:
      - '443:443'
    environment:
      - FRONTEND_HOST=${EXTERNAL_IP}
      - UI_HOST=${EXTERNAL_IP}
      - SOCKET_HOST=${EXTERNAL_IP}
      - FQDN=${EXTERNAL_IP}.nip.io
      - MAX_BODY_SIZE=100M
      - TEMPLATE=minimal

  # Create test data
  create_test_data:
    image: cccs/assemblyline-core:4.5.stable
    environment:
      DEV_ADMIN_PASS: $DEV_ADMIN_PASS
      DEV_USER_PASS: $DEV_USER_PASS
    volumes:
      - ./config.yml:/etc/assemblyline/config.yml:ro
      - ./classification.yml:/etc/assemblyline/classification.yml:ro
    command: python -m assemblyline.odm.random_data.create_test_data full alerts
    depends_on:
      elasticsearch:
        condition: service_healthy

  # UI
  al_ui:
    image: cccs/assemblyline-ui:4.5.stable
    ports:
      - '5000:5000'
    volumes:
      - ./config.yml:/etc/assemblyline/config.yml:ro
      - ./classification.yml:/etc/assemblyline/classification.yml:ro
    restart: on-failure
    depends_on:
      elasticsearch:
        condition: service_healthy

  # SocketIO Server
  al_socketio:
    image: cccs/assemblyline-socketio:4.5.stable
    ports:
      - '5002:5002'
    volumes:
      - ./config.yml:/etc/assemblyline/config.yml:ro
      - ./classification.yml:/etc/assemblyline/classification.yml:ro
    restart: on-failure
    depends_on:
      elasticsearch:
        condition: service_healthy

  # # #####################################
  # # Test Components
  # # (Only to receive heartbeat
  # #  message for the dashboard)
  # # #####################################

  # Hearbeat manager
  # al_heartbeat:
  #   image: cccs/assemblyline-core:4.5.stable
  #   volumes:
  #     - ./config.yml:/etc/assemblyline/config.yml:ro
  #     - ./classification.yml:/etc/assemblyline/classification.yml:ro
  #   command: python -m assemblyline_core.metrics.run_heartbeat_manager
  #   depends_on:
  #     elasticsearch:
  #       condition: service_healthy

  # al_alerter:
  #   image: cccs/assemblyline-core:4.5.stable
  #   volumes:
  #     - ./config.yml:/etc/assemblyline/config.yml:ro
  #     - ./classification.yml:/etc/assemblyline/classification.yml:ro
  #   command: python -m assemblyline_core.alerter.run_alerter
  #   depends_on:
  #     elasticsearch:
  #       condition: service_healthy

  # # Expiry
  # al_expiry:
  #   image: cccs/assemblyline-core:4.5.stable
  #   volumes:
  #     - ./config.yml:/etc/assemblyline/config.yml:ro
  #     - ./classification.yml:/etc/assemblyline/classification.yml:ro
  #   command: python -m assemblyline_core.expiry.run_expiry
  #   depends_on:
  #     elasticsearch:
  #       condition: service_healthy

  # al_dispatcher_files:
  #   image: cccs/assemblyline-core:4.5.stable
  #   volumes:
  #     - ./config.yml:/etc/assemblyline/config.yml:ro
  #     - ./classification.yml:/etc/assemblyline/classification.yml:ro
  #   command: python -m assemblyline_core.dispatching.run_files
  #   depends_on:
  #     elasticsearch:
  #       condition: service_healthy

  # al_dispatcher_submissions:
  #   image: cccs/assemblyline-core:4.5.stable
  #   volumes:
  #     - ./config.yml:/etc/assemblyline/config.yml:ro
  #     - ./classification.yml:/etc/assemblyline/classification.yml:ro
  #   command: python -m assemblyline_core.dispatching.run_submissions
  #   depends_on:
  #     elasticsearch:
  #       condition: service_healthy

  # # Ingester Processes
  # al_ingester_ingest:
  #   image: cccs/assemblyline-core:4.5.stable
  #   volumes:
  #     - ./config.yml:/etc/assemblyline/config.yml:ro
  #     - ./classification.yml:/etc/assemblyline/classification.yml:ro
  #   command: python -m assemblyline_core.ingester.run_ingest
  #   depends_on:
  #     elasticsearch:
  #       condition: service_healthy

  # al_ingester_internal:
  #   image: cccs/assemblyline-core:4.5.stable
  #   volumes:
  #     - ./config.yml:/etc/assemblyline/config.yml:ro
  #     - ./classification.yml:/etc/assemblyline/classification.yml:ro
  #   command: python -m assemblyline_core.ingester.run_internal
  #   depends_on:
  #     elasticsearch:
  #       condition: service_healthy

  # al_ingester_submit:
  #   image: cccs/assemblyline-core:4.5.stable
  #   volumes:
  #     - ./config.yml:/etc/assemblyline/config.yml:ro
  #     - ./classification.yml:/etc/assemblyline/classification.yml:ro
  #   command: python -m assemblyline_core.ingester.run_submit
  #   depends_on:
  #     elasticsearch:
  #       condition: service_healthy

networks:
  default:
    name: external
